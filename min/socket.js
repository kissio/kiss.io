"use strict";function Socket(t,e,s){return this instanceof Socket?(this.nsp=t,this.id="/"!==t.name?t.name+"#"+e.id:e.id,this.opts=this.nsp.opts||{},this.client=e,this.conn=e.conn,this.router=this.nsp.router,this.request=this.conn.request,this.acks={},this.connected=!0,void(this.handshake=this.buildHandshake(s))):new Socket(t,e,s)}var debug=require("debug")("kiss.io:socket"),parser=require("socket.io-parser"),url=require("url"),hasBin=require("has-binary");Socket.events=["error","pre-setup","connect","connection","pre-disconnect","pre-disconnection","disconnect","disconnection","newListener","removeListener"],Socket.prototype.flag=function(t,e){return this._flags=this._flags||{},2==arguments.length&&(this._flags[t]=e),this._flags},Socket.prototype.reset=function(){delete this._flags},Socket.prototype.buildHandshake=function(t){var e=url.parse(this.request.url,!0).query||{};return t=t||e,t.t=e.t,t.EIO=e.EIO,t.transport=e.transport,{headers:this.request.headers,time:new Date+"",address:this.conn.remoteAddress,xdomain:!!this.request.headers.origin,secure:!!this.request.connection.encrypted,issued:+new Date,url:this.request.url,query:t}},Socket.prototype.plug=Socket.prototype.plugin=function(t){var e=t.exports.socket||{};return Object.keys(e).forEach(function(s){var i=e[s];"function"==typeof i?i=i.bind(t,this):"object"==typeof i&&(i=Object.create(i)),this[s]=i},this),this},Socket.prototype.trigger=function(t){var e=this.nsp.router,s=arguments;switch(s.length){case 0:break;case 1:e.emit(t,this);break;case 2:e.emit(t,this,s[1]);break;case 3:e.emit(t,this,s[1],s[2]);break;case 4:e.emit(t,this,s[1],s[2],s[3]);break;default:s=[].slice.call(arguments),s.splice(1,0,this),e.emit.apply(e,s)}},Socket.prototype.emit=function(t){if(-1!==Socket.events.indexOf(t))this.trigger.apply(this,arguments);else{var e=Array.prototype.slice.call(arguments),s={};s.type=hasBin(e)?parser.BINARY_EVENT:parser.EVENT,s.data=e,"function"==typeof e[e.length-1]&&(debug("emitting packet with ack id %d",this.nsp.ids),this.acks[this.nsp.ids]=e.pop(),s.id=this.nsp.ids++),this.packet(s,{"volatile":this.flag("volatile"),compress:this.flag("compress")}),this.reset()}return this},Socket.prototype.broadcast=function(t){this.nsp.broadcast.apply(this.nsp.except(this.id),arguments)},Socket.prototype.send=Socket.prototype.write=function(){var t=Array.prototype.slice.call(arguments);t.unshift("message"),this.emit.apply(this,t)},Socket.prototype.packet=function(t,e){t.nsp=this.nsp.name,e=e||{},e.compress=!1!==e.compress,this.client.packet(t,e)},Socket.prototype.onConnect=function(){debug("socket connected - writing packet"),this.packet({type:parser.CONNECT})},Socket.prototype.onPacket=function(t){switch(debug("got packet %j",t),t.type){case parser.EVENT:this.onEvent(t);break;case parser.BINARY_EVENT:this.onEvent(t);break;case parser.ACK:this.onAck(t);break;case parser.BINARY_ACK:this.onAck(t);break;case parser.DISCONNECT:this.onDisconnect();break;case parser.ERROR:this.onError(t.data)}},Socket.prototype.onEvent=function(t){var e=t.data||[];null!=t.id&&(debug("attaching ack callback to event"),e.push(this.ack(t.id))),this.trigger.apply(this,e)},Socket.prototype.ack=function(t){var e=this,s=!1;return function(){if(!s){var i=Array.prototype.slice.call(arguments),o=hasBin(i)?parser.BINARY_ACK:parser.ACK;debug("sending ack %j",i),e.packet({id:t,type:o,data:i}),s=!0}}},Socket.prototype.onAck=function(t){var e=this.acks[t.id];"function"==typeof e?(debug("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):debug("bad ack %s",t.id)},Socket.prototype.onDisconnect=function(){debug("got disconnect packet"),this.disconnect("client namespace disconnect")},Socket.prototype.onError=function(t){this.router.listensOn("error")?this.trigger("error",t):(console.error("Missing error handler on `socket`."),console.error(t.stack||t))},Socket.prototype.onClose=function(t){debug("closing socket - reason %s",t),this.disconnect(t)},Socket.prototype.error=function(t){this.packet({type:parser.ERROR,data:t})},Socket.prototype.disconnect=function(t){return this.connected?(debug("closing socket - reason %s",t),this.trigger("pre-disconnect",this,t),this.trigger("pre-disconnection",this,t),this.packet({type:parser.DISCONNECT}),this.nsp.remove(this),this.client.remove(this),this.connected=!1,setImmediate(function(){this.trigger("disconnect",this,t),this.trigger("disconnection",this,t)}.bind(this)),this):this},Socket.prototype.compress=function(t){return this.flag("compress",t),this},module.exports=Socket;